import os
import logging
import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, FSInputFile, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from fastapi import FastAPI, Request
from docx import Document
from pptx import Presentation
from dotenv import load_dotenv
import tempfile

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not all([BOT_TOKEN, OPENROUTER_API_KEY, WEBHOOK_URL]):
    raise RuntimeError("‚ùå BOT_TOKEN, OPENROUTER_API_KEY –∏–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ã")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\nüìÑ –†–µ—Ñ–µ—Ä–∞—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏: `—Ä–µ—Ñ–µ—Ä–∞—Ç: —Ç–µ–º–∞`\nüìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äî –Ω–∞–ø–∏—à–∏: `–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Ç–µ–º–∞`\nüßÆ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É!")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message(F.text)
async def handle_message(message: Message):
    text = message.text.strip().lower()

    try:
        if text.startswith("—Ä–µ—Ñ–µ—Ä–∞—Ç:"):
            topic = message.text.split(":", 1)[1].strip()
            await generate_docx(message, topic)

        elif text.startswith("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:"):
            topic = message.text.split(":", 1)[1].strip()
            await generate_pptx(message, topic)

        else:
            await generate_answer(message, message.text.strip())

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter
async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –ü–∏—à–∏ —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": prompt}
        ]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    result = response.json()
    return result["choices"][0]["message"]["content"] if "choices" in result else "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞
async def generate_docx(message: Message, topic: str):
    content = await ask_openrouter(f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: {topic}")

    document = Document()
    document.add_heading(f"–†–µ—Ñ–µ—Ä–∞—Ç: {topic}", 0)
    document.add_paragraph(content)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp:
        document.save(tmp.name)
        await message.answer_document(FSInputFile(tmp.name, filename="referat.docx"))

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
async def generate_pptx(message: Message, topic: str):
    outline = await ask_openrouter(f"–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–º—É: {topic}. –ò—Å–ø–æ–ª—å–∑—É–π 5-7 –ø—É–Ω–∫—Ç–æ–≤.")
    points = outline.split('\n')
    prs = Presentation()
    slide_layout = prs.slide_layouts[1]

    for point in points:
        if not point.strip():
            continue
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = topic
        slide.placeholders[1].text = point.strip()

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as tmp:
        prs.save(tmp.name)
        await message.answer_document(FSInputFile(tmp.name, filename="presentation.pptx"))

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
async def generate_answer(message: Message, user_input: str):
    reply = await ask_openrouter(user_input)
    # Telegram limit: 4096 chars
    if len(reply) > 4000:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".txt") as tmp:
            tmp.write(reply.encode("utf-8"))
            tmp.flush()
            await message.answer_document(FSInputFile(tmp.name, filename="response.txt"))
    else:
        await message.answer(reply)

# Webhook: —É—Å—Ç–∞–Ω–æ–≤–∫–∞
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

# Webhook: –ø—Ä–∏—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return {"ok": True}
