import os
import logging
import httpx
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from docx import Document
from pptx import Presentation
from pptx.util import Inches
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "üìÑ –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî —Ä–µ—Ñ–µ—Ä–∞—Ç, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Äî –†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É ¬´–ò—Å—Ç–æ—Ä–∏—è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞¬ª\n"
        "‚Äî –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –±–∏–æ–ª–æ–≥–∏–∏ –ø—Ä–æ –∫–ª–µ—Ç–∫–∏\n"
        "‚Äî –†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 3 = 7"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: Message):
    user_input = message.text.lower()

    try:
        if "—Ä–µ—Ñ–µ—Ä–∞—Ç" in user_input:
            await generate_docx(message, user_input)
        elif "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è" in user_input:
            await generate_pptx(message, user_input)
        else:
            await generate_answer(message, user_input)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter
async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data
        )
        result = response.json()
        return result["choices"][0]["message"]["content"]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .docx
async def generate_docx(message: Message, prompt: str):
    await message.answer("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ñ–µ—Ä–∞—Ç...")
    content = await ask_openrouter(prompt)

    doc = Document()
    doc.add_heading('–†–µ—Ñ–µ—Ä–∞—Ç', 0)
    doc.add_paragraph(content)
    file_path = "ref.docx"
    doc.save(file_path)

    await message.answer_document(FSInputFile(file_path), caption="üìÑ –ì–æ—Ç–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .pptx
async def generate_pptx(message: Message, prompt: str):
    await message.answer("üõ† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    content = await ask_openrouter(f"{prompt}. –°–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏ –¥–ª—è —Å–ª–∞–π–¥–æ–≤.")
    slides = content.split('\n')

    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
    slide.placeholders[1].text = prompt.capitalize()

    for line in slides:
        if line.strip():
            slide = prs.slides.add_slide(prs.slide_layouts[1])
            slide.shapes.title.text = line.strip()
            slide.placeholders[1].text = "..."

    file_path = "presentation.pptx"
    prs.save(file_path)
    await message.answer_document(FSInputFile(file_path), caption="üìä –ì–æ—Ç–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è")

# –û—Ç–≤–µ—Ç –±–µ–∑ —Ñ–∞–π–ª–∞
async def generate_answer(message: Message, prompt: str):
    await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    reply = await ask_openrouter(prompt)
    await message.answer(reply)

# Webhook –∑–∞–ø—É—Å–∫
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
