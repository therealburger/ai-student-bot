import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, FSInputFile, Update
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import httpx
from docx import Document
from pptx import Presentation
from pptx.util import Inches

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

if not BOT_TOKEN or not OPENROUTER_API_KEY:
    raise RuntimeError("‚ùå BOT_TOKEN –∏–ª–∏ OPENROUTER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter ===
async def generate_text(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openrouter/cinematika-7b",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é
        "messages": [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."},
            {"role": "user", "content": prompt}
        ]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data
        )
        result = response.json()
        return result["choices"][0]["message"]["content"] if "choices" in result else None

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ –≤ docx ===
def create_docx(title: str, content: str) -> str:
    path = f"/tmp/ref_{title[:20]}.docx"
    doc = Document()
    doc.add_heading(title, 0)
    doc.add_paragraph(content)
    doc.save(path)
    return path

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ pptx ===
def create_ppt(title: str, content: str) -> str:
    path = f"/tmp/pres_{title[:20]}.pptx"
    prs = Presentation()
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    slide.shapes.title.text = title
    slide.placeholders[1].text = content
    prs.save(path)
    return path

# === /start ===
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\nüìå –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n‚Äî –†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ—Ç–µ–ø–ª–µ–Ω–∏–µ\n‚Äî –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Å–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n‚Äî –†–µ—à–∏: 2x + 3 = 7")

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
@dp.message(F.text)
async def handle_message(message: Message):
    query = message.text.lower().strip()
    await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    if "—Ä–µ—Ñ–µ—Ä–∞—Ç" in query:
        content = await generate_text(f"–ù–∞–ø–∏—à–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç: {query}")
        if not content:
            return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞—Ç.")
        path = create_docx(query, content)
        await message.answer_document(FSInputFile(path, filename="referat.docx"))

    elif "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è" in query:
        content = await generate_text(f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é: {query}")
        if not content:
            return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é.")
        path = create_ppt(query, content)
        await message.answer_document(FSInputFile(path, filename="presentation.pptx"))

    elif "—Ä–µ—à–∏" in query or "–∑–∞–¥–∞—á–∞" in query:
        content = await generate_text(f"–†–µ—à–∏ –∑–∞–¥–∞—á—É: {query}")
        await message.answer(content if content else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É.")

    else:
        content = await generate_text(f"–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {query}")
        await message.answer(content if content else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

# === Webhook ===
@app.on_event("startup")
async def startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

