import os
import logging
import httpx

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Update, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from fastapi import FastAPI, Request
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# FastAPI
app = FastAPI()

# –ö–Ω–æ–ø–∫–∏
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìö –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")],
    [InlineKeyboardButton(text="üîÑ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º", switch_inline_query="")],
    [InlineKeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ", callback_data="subscribe")],
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ üéì\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã\nüìé –ü–æ–ª—É—á–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã\nüí¨ –î–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=menu_keyboard
    )

# –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (PDF)
@dp.callback_query(F.data == "materials")
async def send_materials(callback: types.CallbackQuery):
    await callback.answer()
    file_path = "materials/sample_essay.pdf"
    doc = FSInputFile(file_path, filename="–†–µ—Ñ–µ—Ä–∞—Ç.pdf")
    await callback.message.answer_document(
        doc, caption="üìé –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞—Ç–∞. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!"
    )

# –ü–æ–¥–ø–∏—Å–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
@dp.callback_query(F.data == "subscribe")
async def subscribe_soon(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–∫–æ—Ä–æ! –ü–æ–∫–∞ –ø–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ ‚Äî AI-–æ—Ç–≤–µ—Ç
@dp.message()
async def ask_ai(message: types.Message):
    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }

        data = {
            "model": "openrouter/openchat-3.5-0106",
            "messages": [
                {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."},
                {"role": "user", "content": message.text}
            ]
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data
            )

        result = response.json()
        reply = result["choices"][0]["message"]["content"]
        await message.answer(reply)

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ OpenRouter: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")

# Webhook: —É—Å—Ç–∞–Ω–æ–≤–∫–∞
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

# Webhook: –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        data = await request.json()
        update = Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return {"ok": True}
