import os
import logging
import httpx
import tempfile

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from aiogram.filters import CommandStart
from fastapi import FastAPI, Request
from dotenv import load_dotenv
from docx import Document
from pptx import Presentation

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# === –õ–æ–≥–∏ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# === –ë–æ—Ç –∏ FastAPI ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                         "üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ñ–µ—Ä–∞—Ç—ã (.docx)\n"
                         "üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (.pptx)\n"
                         "üßÆ –†–µ—à–∞—é –∑–∞–¥–∞—á–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã\n"
                         "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å!")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def handle_message(message: types.Message):
    try:
        user_input = message.text.lower()

        if "—Ä–µ—Ñ–µ—Ä–∞—Ç" in user_input:
            await generate_docx(message, user_input)
        elif "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü" in user_input:
            await generate_pptx(message, user_input)
        else:
            await generate_answer(message, user_input)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter ===
async def ask_openrouter(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "mistralai/mixtral-8x7b",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å —Ç–µ–∫—Å—Ç—ã, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏."},
            {"role": "user", "content": prompt}
        ]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        result = response.json()
        if "choices" in result:
            return result["choices"][0]["message"]["content"]
        else:
            raise Exception(f"–û—à–∏–±–∫–∞ OpenRouter: {result}")

# === –û—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ ===
async def generate_answer(message, prompt):
    reply = await ask_openrouter(prompt)
    await message.answer(reply)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DOCX (—Ä–µ—Ñ–µ—Ä–∞—Ç–∞) ===
async def generate_docx(message, prompt):
    content = await ask_openrouter(f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: {prompt}")
    doc = Document()
    doc.add_heading("–†–µ—Ñ–µ—Ä–∞—Ç", 0)
    for paragraph in content.split('\n'):
        doc.add_paragraph(paragraph)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as tmp:
        doc.save(tmp.name)
        file = FSInputFile(tmp.name, filename="referat.docx")
        await message.answer_document(file)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PPTX (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏) ===
async def generate_pptx(message, prompt):
    content = await ask_openrouter(f"–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–º—É: {prompt}")
    slides = [s.strip() for s in content.split('\n') if s.strip()]

    prs = Presentation()
    for slide_text in slides:
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        title, *body = slide_text.split(":")
        slide.shapes.title.text = title.strip()
        slide.placeholders[1].text = ":".join(body).strip() if body else ""

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pptx") as tmp:
        prs.save(tmp.name)
        file = FSInputFile(tmp.name, filename="presentation.pptx")
        await message.answer_document(file)

# === FastAPI startup ===
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

# === Webhook endpoint ===
@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update.model_validate(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return {"ok": True}
