import os
import logging
import httpx

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import DefaultBotProperties, Message, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from fastapi import FastAPI, Request
from dotenv import load_dotenv

from docx import Document

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ FastAPI
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ —Ç–µ–º—É, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ñ–µ—Ä–∞—Ç –≤ .docx!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text(message: Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }

        data = {
            "model": "mistralai/mistral-7b-instruct",  # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
            "messages": [
                {"role": "system", "content": "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É."},
                {"role": "user", "content": message.text}
            ]
        }

        async with httpx.AsyncClient() as client:
            response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

        result = response.json()
        if "choices" not in result:
            logger.error(f"–û—à–∏–±–∫–∞ OpenRouter: {result}")
            await message.answer("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        content = result["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª .docx
        file_path = f"/tmp/ref_{message.from_user.id}.docx"
        document = Document()
        document.add_heading(message.text, 0)
        document.add_paragraph(content)
        document.save(file_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª
        await message.answer_document(FSInputFile(file_path), caption="–í–æ—Ç —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞—Ç üéì")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.post(WEBHOOK_PATH)
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        update = bot.session.telegram_object_decoder.decode(data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    return {"ok": True}

