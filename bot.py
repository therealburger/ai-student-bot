import os
import logging
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand
from aiogram.filters import CommandStart
import httpx
from docx import Document
from pptx import Presentation
from pptx.util import Inches
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
                         "üìÑ –†–µ—Ñ–µ—Ä–∞—Ç: /essay —Ç–µ–º–∞\n"
                         "üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: /ppt —Ç–µ–º–∞\n"
                         "üß† –í–æ–ø—Ä–æ—Å: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º")


@dp.message(F.text.startswith("/essay "))
async def generate_essay(message: Message):
    topic = message.text.replace("/essay ", "").strip()
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ñ–µ—Ä–∞—Ç...")
    try:
        content = await ask_openrouter(f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: {topic}")
        file_path = f"essay_{message.from_user.id}.docx"
        doc = Document()
        doc.add_heading(f"–†–µ—Ñ–µ—Ä–∞—Ç: {topic}", 0)
        doc.add_paragraph(content)
        doc.save(file_path)
        await message.answer_document(FSInputFile(file_path))
        os.remove(file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞.")


@dp.message(F.text.startswith("/ppt "))
async def generate_presentation(message: Message):
    topic = message.text.replace("/ppt ", "").strip()
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é...")
    try:
        content = await ask_openrouter(f"–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–º—É: {topic}")
        slides = content.split("\n")
        prs = Presentation()
        slide_layout = prs.slide_layouts[1]
        for slide_text in slides:
            slide = prs.slides.add_slide(slide_layout)
            title, body = slide_text.split(":", 1) if ":" in slide_text else ("–°–ª–∞–π–¥", slide_text)
            slide.shapes.title.text = title.strip()
            slide.placeholders[1].text = body.strip()
        file_path = f"presentation_{message.from_user.id}.pptx"
        prs.save(file_path)
        await message.answer_document(FSInputFile(file_path))
        os.remove(file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")


@dp.message()
async def handle_message(message: Message):
    await message.answer("‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    try:
        reply = await ask_openrouter(message.text)
        await message.answer(reply[:4096])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")


async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openchat/openchat-3.5-0106",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞—é—â–∏–π —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."},
            {"role": "user", "content": prompt}
        ]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
    result = response.json()
    if "choices" in result:
        return result["choices"][0]["message"]["content"]
    raise Exception(f"–û—à–∏–±–∫–∞ OpenRouter: {result}")


@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    update = await request.json()
    await dp.feed_raw_update(bot, update)
    return {"ok": True}

