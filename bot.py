import os
import logging
import httpx
from dotenv import load_dotenv
from fastapi import FastAPI, Request

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder

from docx import Document
from pptx import Presentation

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
REQUIRED_CHANNEL_ID = os.getenv("REQUIRED_CHANNEL_ID")  # @channel_username

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def is_user_subscribed(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL_ID, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "üìÑ –†–µ—Ñ–µ—Ä–∞—Ç: `—Ä–µ—Ñ–µ—Ä–∞—Ç: —Ç–µ–º–∞`\n"
        "üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: `–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Ç–µ–º–∞`\n"
        "üßÆ –ó–∞–¥–∞—á–∞: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë!"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if not await is_user_subscribed(message.from_user.id):
            kb = InlineKeyboardBuilder()
            kb.button(
                text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                url=f"https://t.me/{REQUIRED_CHANNEL_ID.replace('@', '')}"
            )
            await message.answer("üö´ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:", reply_markup=kb.as_markup())
            return

        text = message.text.lower()

        if text.startswith("—Ä–µ—Ñ–µ—Ä–∞—Ç:"):
            prompt = text.split("—Ä–µ—Ñ–µ—Ä–∞—Ç:", 1)[1].strip()
            await generate_docx(message, prompt)

        elif text.startswith("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:"):
            prompt = text.split("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:", 1)[1].strip()
            await generate_pptx(message, prompt)

        else:
            await generate_answer(message, text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# –û—Ç–≤–µ—Ç
async def generate_answer(message: types.Message, prompt: str):
    try:
        response = await ask_openrouter(prompt)
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.")


# DOCX
async def generate_docx(message: types.Message, prompt: str):
    try:
        content = await ask_openrouter(f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: {prompt}")
        doc = Document()
        doc.add_heading(f"–†–µ—Ñ–µ—Ä–∞—Ç: {prompt}", 0)
        doc.add_paragraph(content)

        filename = f"ref_{message.chat.id}.docx"
        doc.save(filename)
        await message.answer_document(FSInputFile(filename))
        os.remove(filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ .docx: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞.")


# PPTX
async def generate_pptx(message: types.Message, prompt: str):
    try:
        content = await ask_openrouter(f"–°–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ: {prompt}. –§–æ—Ä–º–∞—Ç: –°–ª–∞–π–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –û–ø–∏—Å–∞–Ω–∏–µ")
        prs = Presentation()
        for line in content.split("\n"):
            if ":" in line:
                title, body = line.split(":", 1)
                slide = prs.slides.add_slide(prs.slide_layouts[1])
                slide.shapes.title.text = title.strip()
                slide.placeholders[1].text = body.strip()

        filename = f"ppt_{message.chat.id}.pptx"
        prs.save(filename)
        await message.answer_document(FSInputFile(filename))
        os.remove(filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ .pptx: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")


# OpenRouter –∑–∞–ø—Ä–æ—Å
async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}]
    }
    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
    result = response.json()
    if "choices" in result:
        return result["choices"][0]["message"]["content"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ OpenRouter: {result}")


# Webhook
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")


@app.post(WEBHOOK_PATH)
async def process_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
