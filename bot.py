import os
import logging
import httpx
from dotenv import load_dotenv
from fastapi import FastAPI, Request

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, FSInputFile, Update
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from docx import Document
from pptx import Presentation

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# FastAPI
app = FastAPI()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "üìÑ –†–µ—Ñ–µ—Ä–∞—Ç: `—Ä–µ—Ñ–µ—Ä–∞—Ç: —Ç–µ–º–∞`\n"
        "üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: `–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Ç–µ–º–∞`\n"
        "üßÆ –ó–∞–¥–∞—á–∞: –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    try:
        text = message.text.lower()

        if text.startswith("—Ä–µ—Ñ–µ—Ä–∞—Ç:"):
            prompt = text.split("—Ä–µ—Ñ–µ—Ä–∞—Ç:", 1)[1].strip()
            await generate_docx(message, prompt)

        elif text.startswith("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:"):
            prompt = text.split("–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:", 1)[1].strip()
            await generate_pptx(message, prompt)

        else:
            await generate_answer(message, message.text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
async def generate_answer(message: Message, prompt: str):
    try:
        response = await ask_openrouter(prompt)
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞—Ç–∞ (.docx)
async def generate_docx(message: Message, prompt: str):
    try:
        content = await ask_openrouter(f"–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ —Ç–µ–º—É: {prompt}")
        doc = Document()
        doc.add_heading(f"–†–µ—Ñ–µ—Ä–∞—Ç: {prompt}", 0)
        doc.add_paragraph(content)

        filename = f"ref_{message.chat.id}.docx"
        doc.save(filename)

        if os.path.exists(filename):
            await message.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ—Ñ–µ—Ä–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx...")
            await message.answer_document(FSInputFile(filename))
            os.remove(filename)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–∞.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ (.pptx)
async def generate_pptx(message: Message, prompt: str):
    try:
        content = await ask_openrouter(f"–°–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ: {prompt}. –§–æ—Ä–º–∞—Ç: –°–ª–∞–π–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –û–ø–∏—Å–∞–Ω–∏–µ")

        prs = Presentation()
        for line in content.split("\n"):
            if ":" in line:
                parts = line.split(":", 1)
                title = parts[0].strip()
                body = parts[1].strip()
                slide = prs.slides.add_slide(prs.slide_layouts[1])
                slide.shapes.title.text = title
                slide.placeholders[1].text = body

        filename = f"ppt_{message.chat.id}.pptx"
        prs.save(filename)

        if os.path.exists(filename):
            await message.answer("üìé –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pptx...")
            await message.answer_document(FSInputFile(filename))
            os.remove(filename)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.")

# –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API
async def ask_openrouter(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    result = response.json()
    if "choices" in result:
        return result["choices"][0]["message"]["content"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ OpenRouter: {result}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(FULL_WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {FULL_WEBHOOK_URL}")

@app.post(WEBHOOK_PATH)
async def process_webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
